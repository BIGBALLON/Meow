{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BG's Notebook This project was powered by MkDocs , a fast, simple and downright gorgeous static site generator that's geared towards building project documentation.","title":"BG's Notebook"},{"location":"#bgs-notebook","text":"This project was powered by MkDocs , a fast, simple and downright gorgeous static site generator that's geared towards building project documentation.","title":"BG's Notebook"},{"location":"dl_tools/","text":"Deep Learning Tools CUDA Installation Official doc: nvidia-cuda Previous note: PyTorch-install.md PS: To install the Display Driver, the Nouveau drivers must first be disabled. Each distribution of Linux has a different method for disabling Nouveau. The Nouveau drivers are loaded if the following command prints anything: lsmod | grep nouveau cuDNN Installation Official doc: nvidia-deeplearning Previous note: PyTorch-install.md # 1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file. # 2. Unzip the cuDNN package. tar -xzvf cudnn-x.x-linux-x64-v8.x.x.x.tgz # 3. Copy the following files into the CUDA Toolkit directory, and change the file permissions. sudo cp cuda/include/cudnn.h /usr/local/cuda/include sudo cp cuda/include/cudnn_version.h /usr/local/cuda/include sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn* Check CUDA version cat /usr/local/cuda/version.txt # CUDA Version 10.2.89 nvcc--version # nvcc: NVIDIA (R) Cuda compiler driver # Copyright (c) 2005-2019 NVIDIA Corporation # Built on Wed_Oct_23_19:24:38_PDT_2019 # Cuda compilation tools, release 10.2, V10.2.89 Check cuDNN version cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 #define CUDNN_MAJOR 7 #define CUDNN_MINOR 6 #define CUDNN_PATCHLEVEL 5 -- #define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL) #include \"driver_types.h\" Visit Tensorboard via SSH ssh -L 12306:127.0.0.1:12306 account@server.address # see https://zhuanlan.zhihu.com/p/57630633 # and https://stackoverflow.com/questions/38513333/is-it-possible-to-see-tensorboard-over-ssh","title":"Deep Learning Tools"},{"location":"dl_tools/#deep-learning-tools","text":"","title":"Deep Learning Tools"},{"location":"dl_tools/#cuda-installation","text":"Official doc: nvidia-cuda Previous note: PyTorch-install.md PS: To install the Display Driver, the Nouveau drivers must first be disabled. Each distribution of Linux has a different method for disabling Nouveau. The Nouveau drivers are loaded if the following command prints anything: lsmod | grep nouveau","title":"CUDA Installation"},{"location":"dl_tools/#cudnn-installation","text":"Official doc: nvidia-deeplearning Previous note: PyTorch-install.md # 1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file. # 2. Unzip the cuDNN package. tar -xzvf cudnn-x.x-linux-x64-v8.x.x.x.tgz # 3. Copy the following files into the CUDA Toolkit directory, and change the file permissions. sudo cp cuda/include/cudnn.h /usr/local/cuda/include sudo cp cuda/include/cudnn_version.h /usr/local/cuda/include sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","title":"cuDNN Installation"},{"location":"dl_tools/#check-cuda-version","text":"cat /usr/local/cuda/version.txt # CUDA Version 10.2.89 nvcc--version # nvcc: NVIDIA (R) Cuda compiler driver # Copyright (c) 2005-2019 NVIDIA Corporation # Built on Wed_Oct_23_19:24:38_PDT_2019 # Cuda compilation tools, release 10.2, V10.2.89","title":"Check CUDA version"},{"location":"dl_tools/#check-cudnn-version","text":"cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 #define CUDNN_MAJOR 7 #define CUDNN_MINOR 6 #define CUDNN_PATCHLEVEL 5 -- #define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL) #include \"driver_types.h\"","title":"Check cuDNN version"},{"location":"dl_tools/#visit-tensorboard-via-ssh","text":"ssh -L 12306:127.0.0.1:12306 account@server.address # see https://zhuanlan.zhihu.com/p/57630633 # and https://stackoverflow.com/questions/38513333/is-it-possible-to-see-tensorboard-over-ssh","title":"Visit Tensorboard via SSH"},{"location":"linux_basic/","text":"Linux Basic Reference: linuxtools Quick Search uname - print system information lshw - list hardware lscpu - display information about the CPU architecture fdisk - manipulate disk partition table df - report file system disk space usage free - display amount of free and used memory in the system bg, fg, & and Ctrl+Z ps - report a snapshot of the current processes grep, egrep, fgrep, rgrep - print lines matching a pattern diff - compare files line by line find - search for files in a directory hierarchy echo - display a line of text history - GNU History Library kill - send a signal to a process groups - print the groups a user is in chmod - change file mode bits chgrp - change group ownership chown - change file owner and group curl - transfer a URL wget - The non-interactive network downloader top - display Linux processes nl - Number lines of files cat - concatenate files and print on the standard output less - opposite of more wc - print newline, word, and byte counts for each file mv - move (rename) files cp - copy files and directories pwd - print name of current/working directory mkdir - make directories passwd - change user password ping - send ICMP ECHO_REQUEST to network hosts head - output the first part of files tail - output the last part of files uptime - Tell how long the system has been running. date - Print or set the system date and time. whoami - Print effective userid. shutdown - Halt, power-off or reboot the machine w - show who is logged on and what they are doing ssh \u2014 OpenSSH SSH client (remote login program) cal, ncal \u2014 displays a calendar and the date of Easter ctrl + a or home: Go to the beginning of the line. ctrl + e or End: Go to the end of the line. nvidia-smi: NVIDIA System Management Interface program ctrl + xx: Move between the beginning of the line and the current position of the cursor. This allows you to press Ctrl+XX to return to the start of the line, change something, and then press Ctrl+XX to go back to your original cursor position. ctrl + c: Interrupt (kill) the current foreground process running in in the terminal. ctrl + d: Close the bash shell. ctrl + z: Suspend the current foreground process running in bash. ctrl + l: Clear the screen. This is similar to running the \u201cclear\u201d command. ctrl + s: Stop all output to the screen. ctrl + q: Resume output to the screen after stopping it with ctrl + s. ctrl + w: Cut the word before the cursor, adding it to the clipboard. ctrl + k: Cut the part of the line after the cursor, adding it to the clipboard. ctrl + u: Cut the part of the line before the cursor, adding it to the clipboard. ctrl + y: Paste the last thing you cut from the clipboard. The y here stands for \u201cyank\u201d. alt + u: Capitalize every character from the cursor to the end of the current word, converting the characters to upper case. alt + l: Uncapitalize every character from the cursor to the end of the current word, converting the characters to lower case. alt + c: Capitalize the character under the cursor. Your cursor will move to the end of the current word. alt + r: Revert any changes to a command you\u2019ve pulled from your history if you\u2019ve edited it. ctrl + r: Recall the last command matching the characters you provide. Press this shortcut and start typing to search your bash history for a command.","title":"Linux Basic"},{"location":"linux_basic/#linux-basic","text":"Reference: linuxtools","title":"Linux Basic"},{"location":"linux_basic/#quick-search","text":"uname - print system information lshw - list hardware lscpu - display information about the CPU architecture fdisk - manipulate disk partition table df - report file system disk space usage free - display amount of free and used memory in the system bg, fg, & and Ctrl+Z ps - report a snapshot of the current processes grep, egrep, fgrep, rgrep - print lines matching a pattern diff - compare files line by line find - search for files in a directory hierarchy echo - display a line of text history - GNU History Library kill - send a signal to a process groups - print the groups a user is in chmod - change file mode bits chgrp - change group ownership chown - change file owner and group curl - transfer a URL wget - The non-interactive network downloader top - display Linux processes nl - Number lines of files cat - concatenate files and print on the standard output less - opposite of more wc - print newline, word, and byte counts for each file mv - move (rename) files cp - copy files and directories pwd - print name of current/working directory mkdir - make directories passwd - change user password ping - send ICMP ECHO_REQUEST to network hosts head - output the first part of files tail - output the last part of files uptime - Tell how long the system has been running. date - Print or set the system date and time. whoami - Print effective userid. shutdown - Halt, power-off or reboot the machine w - show who is logged on and what they are doing ssh \u2014 OpenSSH SSH client (remote login program) cal, ncal \u2014 displays a calendar and the date of Easter ctrl + a or home: Go to the beginning of the line. ctrl + e or End: Go to the end of the line. nvidia-smi: NVIDIA System Management Interface program ctrl + xx: Move between the beginning of the line and the current position of the cursor. This allows you to press Ctrl+XX to return to the start of the line, change something, and then press Ctrl+XX to go back to your original cursor position. ctrl + c: Interrupt (kill) the current foreground process running in in the terminal. ctrl + d: Close the bash shell. ctrl + z: Suspend the current foreground process running in bash. ctrl + l: Clear the screen. This is similar to running the \u201cclear\u201d command. ctrl + s: Stop all output to the screen. ctrl + q: Resume output to the screen after stopping it with ctrl + s. ctrl + w: Cut the word before the cursor, adding it to the clipboard. ctrl + k: Cut the part of the line after the cursor, adding it to the clipboard. ctrl + u: Cut the part of the line before the cursor, adding it to the clipboard. ctrl + y: Paste the last thing you cut from the clipboard. The y here stands for \u201cyank\u201d. alt + u: Capitalize every character from the cursor to the end of the current word, converting the characters to upper case. alt + l: Uncapitalize every character from the cursor to the end of the current word, converting the characters to lower case. alt + c: Capitalize the character under the cursor. Your cursor will move to the end of the current word. alt + r: Revert any changes to a command you\u2019ve pulled from your history if you\u2019ve edited it. ctrl + r: Recall the last command matching the characters you provide. Press this shortcut and start typing to search your bash history for a command.","title":"Quick Search"},{"location":"linux_tools/","text":"Linux Tools Reference: ubuntu_rc Miniconda Installation cd ~/Downloads # install latest miniconda # see https://docs.conda.io/en/latest/miniconda.html wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh bash miniconda.sh -b -p $HOME/miniconda eval \"$(~/miniconda/bin/conda shell.bash hook)\" conda init Zsh Installation # install zsh # see http://www.zsh.org/ sudo apt install zsh -y # install oh-my-zsh # see https://ohmyz.sh/ cd ~ sh -c \"$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" bash -c \"$(curl -fsSL https://raw.githubusercontent.com/skylerlee/zeta-zsh-theme/master/scripts/install.sh)\" # install plugin for omzsh git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions sed -i 's/(git)/(git extract z zsh-syntax-highlighting zsh-autosuggestions)/' ~/.zshrc tmux Installation # install tmux sudo apt install zsh -y # install oh-my-tmux cd ~ git clone https://github.com/gpakosz/.tmux.git ln -s -f .tmux/.tmux.conf cp .tmux/.tmux.conf.local . vimrc Installation git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime sh ~/.vim_runtime/install_awesome_vimrc.sh Nvidia-driver Installation dowload script here #!/bin/bash set -e DRIVER_VERSION=$1 curl -O -L \"http://us.download.nvidia.com/XFree86/Linux-x86_64/${DRIVER_VERSION}/NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run\" sudo bash \"NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run\" # e.g., 440.82 440.64 # For Tasla: http://us.download.nvidia.com/tesla/410.129/NVIDIA-Linux-x86_64-410.129-diagnostic.run # For GeForce: http://us.download.nvidia.com/XFree86/Linux-x86_64/440.82/NVIDIA-Linux-x86_64-440.82.run Docker Installation dowload script here #!/bin/bash # uninstall old versions sudo apt-get remove docker docker-engine docker.io containerd runc # update the apt package index and install packages sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # set up the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # install docker engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io # change docker source [optional] # try to use aliyun https://xxxxxx.mirror.aliyuncs.com sudo tee /etc/docker/daemon.json <<-'EOF' { \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"https://docker.mirrors.ustc.edu.cn\" ] } EOF sudo service docker restart # verify that Docker Engine is installed correctly sudo docker run hello-world Nvidia-docker Installation dowload script here #!/bin/bash # Add the package repositories distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit sudo systemctl restart docker","title":"Linux Tools"},{"location":"linux_tools/#linux-tools","text":"Reference: ubuntu_rc","title":"Linux Tools"},{"location":"linux_tools/#miniconda-installation","text":"cd ~/Downloads # install latest miniconda # see https://docs.conda.io/en/latest/miniconda.html wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh bash miniconda.sh -b -p $HOME/miniconda eval \"$(~/miniconda/bin/conda shell.bash hook)\" conda init","title":"Miniconda Installation"},{"location":"linux_tools/#zsh-installation","text":"# install zsh # see http://www.zsh.org/ sudo apt install zsh -y # install oh-my-zsh # see https://ohmyz.sh/ cd ~ sh -c \"$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" bash -c \"$(curl -fsSL https://raw.githubusercontent.com/skylerlee/zeta-zsh-theme/master/scripts/install.sh)\" # install plugin for omzsh git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions sed -i 's/(git)/(git extract z zsh-syntax-highlighting zsh-autosuggestions)/' ~/.zshrc","title":"Zsh Installation"},{"location":"linux_tools/#tmux-installation","text":"# install tmux sudo apt install zsh -y # install oh-my-tmux cd ~ git clone https://github.com/gpakosz/.tmux.git ln -s -f .tmux/.tmux.conf cp .tmux/.tmux.conf.local .","title":"tmux Installation"},{"location":"linux_tools/#vimrc-installation","text":"git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime sh ~/.vim_runtime/install_awesome_vimrc.sh","title":"vimrc Installation"},{"location":"linux_tools/#nvidia-driver-installation","text":"dowload script here #!/bin/bash set -e DRIVER_VERSION=$1 curl -O -L \"http://us.download.nvidia.com/XFree86/Linux-x86_64/${DRIVER_VERSION}/NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run\" sudo bash \"NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run\" # e.g., 440.82 440.64 # For Tasla: http://us.download.nvidia.com/tesla/410.129/NVIDIA-Linux-x86_64-410.129-diagnostic.run # For GeForce: http://us.download.nvidia.com/XFree86/Linux-x86_64/440.82/NVIDIA-Linux-x86_64-440.82.run","title":"Nvidia-driver Installation"},{"location":"linux_tools/#docker-installation","text":"dowload script here #!/bin/bash # uninstall old versions sudo apt-get remove docker docker-engine docker.io containerd runc # update the apt package index and install packages sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # set up the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # install docker engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io # change docker source [optional] # try to use aliyun https://xxxxxx.mirror.aliyuncs.com sudo tee /etc/docker/daemon.json <<-'EOF' { \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"https://docker.mirrors.ustc.edu.cn\" ] } EOF sudo service docker restart # verify that Docker Engine is installed correctly sudo docker run hello-world","title":"Docker Installation"},{"location":"linux_tools/#nvidia-docker-installation","text":"dowload script here #!/bin/bash # Add the package repositories distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit sudo systemctl restart docker","title":"Nvidia-docker Installation"}]}